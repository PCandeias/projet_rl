!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CartPoleRunner	dqn/cartpole_runner.py	/^class CartPoleRunner(GymRunner):$/;"	c
DqnSolver	dqn/dqn_solver.py	/^class DqnSolver(object):$/;"	c
GymRunner	dqn/gym_runner.py	/^class GymRunner(object):$/;"	c
LiveGraph	dqn/live_graph.py	/^class LiveGraph(object):$/;"	c
MultiCartpoleRunner	dqn/multi_cartpole_runner.py	/^class MultiCartpoleRunner(MultiGymRunner):$/;"	c
MultiGymRunner	dqn/multi_gym_runner.py	/^class MultiGymRunner(object):$/;"	c
RandomFishermanEnv	fisherman_dilemma/fisherman_random.py	/^class RandomFishermanEnv(gym.Env):$/;"	c
__init__	dqn/dqn_solver.py	/^    def __init__(self, observation_size, action_size, gamma=0.97, eps=1.0, eps_decay=0.995, eps_min=0.1, alpha=0.01,$/;"	m	class:DqnSolver
__init__	dqn/gym_runner.py	/^    def __init__(self):$/;"	m	class:GymRunner
__init__	dqn/live_graph.py	/^    def __init__(self, maxlen=100, lines=1, labels=None):$/;"	m	class:LiveGraph
__init__	dqn/multi_gym_runner.py	/^    def __init__(self, n_agents=1):$/;"	m	class:MultiGymRunner
__init__	fisherman_dilemma/fisherman_random.py	/^    def __init__(self):$/;"	m	class:RandomFishermanEnv
_create_agents	dqn/multi_gym_runner.py	/^    def _create_agents(self, gamma=1.0, eps=1.0, eps_decay=0.995, eps_min=0.1, alpha=0.01,$/;"	m	class:MultiGymRunner
_create_environment	dqn/multi_cartpole_runner.py	/^    def _create_environment(self):$/;"	m	class:MultiCartpoleRunner
_create_environment	dqn/multi_gym_runner.py	/^    def _create_environment(self):$/;"	m	class:MultiGymRunner
_preprocess_reward	dqn/multi_gym_runner.py	/^    def _preprocess_reward(self, reward):$/;"	m	class:MultiGymRunner
_preprocess_state	dqn/multi_cartpole_runner.py	/^    def _preprocess_state(self, state):$/;"	m	class:MultiCartpoleRunner
_preprocess_state	dqn/multi_gym_runner.py	/^    def _preprocess_state(self, state):$/;"	m	class:MultiGymRunner
_reset_metrics	dqn/multi_cartpole_runner.py	/^    def _reset_metrics(self, r_episodes=False):$/;"	m	class:MultiCartpoleRunner
_reset_metrics	dqn/multi_gym_runner.py	/^    def _reset_metrics(self, r_episodes=False):$/;"	m	class:MultiGymRunner
_select_actions	dqn/multi_gym_runner.py	/^    def _select_actions(self, state):$/;"	m	class:MultiGymRunner
_store_transitions	dqn/multi_gym_runner.py	/^    def _store_transitions(self, state, actions, rewards, next_state, done):$/;"	m	class:MultiGymRunner
_train_agents	dqn/multi_gym_runner.py	/^    def _train_agents(self):$/;"	m	class:MultiGymRunner
_update_metrics	dqn/multi_cartpole_runner.py	/^    def _update_metrics(self, state, actions, rewards, next_state, done, score):$/;"	m	class:MultiCartpoleRunner
_update_metrics	dqn/multi_gym_runner.py	/^    def _update_metrics(self, state, actions, rewards, next_state, done, score):$/;"	m	class:MultiGymRunner
add_value	dqn/live_graph.py	/^    def add_value(self, new_values):$/;"	m	class:LiveGraph
build_model	dqn/dqn_solver.py	/^    def build_model(self):$/;"	m	class:DqnSolver
close	fisherman_dilemma/fisherman_random.py	/^    def close(self):$/;"	m	class:RandomFishermanEnv
create_agent	dqn/gym_runner.py	/^    def create_agent(self, gamma=1.0, eps=1.0, eps_decay=0.99, eps_min=0.05, alpha=0.01, alpha_decay=0.01):$/;"	m	class:GymRunner
create_environment	dqn/cartpole_runner.py	/^    def create_environment(self):$/;"	m	class:CartPoleRunner
create_environment	dqn/gym_runner.py	/^    def create_environment(self):$/;"	m	class:GymRunner
find	dqn/parameter_finder.py	/^def find(runner, v_gamma, v_eps, v_eps_decay, v_eps_min, v_alpha, v_alpha_decay, n_epochs=1, n_episodes=2000,$/;"	f
get_action_size	dqn/cartpole_runner.py	/^    def get_action_size(self):$/;"	m	class:CartPoleRunner
get_action_size	dqn/gym_runner.py	/^    def get_action_size(self):$/;"	m	class:GymRunner
get_action_size	dqn/multi_cartpole_runner.py	/^    def get_action_size(self):$/;"	m	class:MultiCartpoleRunner
get_action_size	dqn/multi_gym_runner.py	/^    def get_action_size(self):$/;"	m	class:MultiGymRunner
get_metrics	dqn/multi_cartpole_runner.py	/^    def get_metrics(self):$/;"	m	class:MultiCartpoleRunner
get_metrics	dqn/multi_gym_runner.py	/^    def get_metrics(self):$/;"	m	class:MultiGymRunner
get_observation_size	dqn/cartpole_runner.py	/^    def get_observation_size(self):$/;"	m	class:CartPoleRunner
get_observation_size	dqn/gym_runner.py	/^    def get_observation_size(self):$/;"	m	class:GymRunner
get_observation_size	dqn/multi_cartpole_runner.py	/^    def get_observation_size(self):$/;"	m	class:MultiCartpoleRunner
get_observation_size	dqn/multi_gym_runner.py	/^    def get_observation_size(self):$/;"	m	class:MultiGymRunner
get_values	dqn/dqn_solver.py	/^    def get_values(self, state):$/;"	m	class:DqnSolver
params	dqn/cartpole_runner.py	/^params = parameter_finder.find(runner=runner, v_gamma=np.linspace(0.95, 1.0, num=5), v_eps=np.array([1.0]),$/;"	v
preprocess_reward	dqn/gym_runner.py	/^    def preprocess_reward(self, reward):$/;"	m	class:GymRunner
preprocess_state	dqn/cartpole_runner.py	/^    def preprocess_state(self, state):$/;"	m	class:CartPoleRunner
preprocess_state	dqn/gym_runner.py	/^    def preprocess_state(self, state):$/;"	m	class:GymRunner
render	fisherman_dilemma/fisherman_random.py	/^    def render(self):$/;"	m	class:RandomFishermanEnv
replay	dqn/dqn_solver.py	/^    def replay(self):$/;"	m	class:DqnSolver
reset	fisherman_dilemma/fisherman_random.py	/^    def reset(self):$/;"	m	class:RandomFishermanEnv
run	dqn/gym_runner.py	/^    def run(self, n_episodes, train=False, render=False, goal_score=None, verbose=False):$/;"	m	class:GymRunner
run	dqn/multi_gym_runner.py	/^    def run(self, n_episodes, train=False, render=False):$/;"	m	class:MultiGymRunner
runner	dqn/cartpole_runner.py	/^runner = CartPoleRunner()$/;"	v
runner	dqn/multi_cartpole_runner.py	/^runner = MultiCartpoleRunner(100)$/;"	v
select_action	dqn/dqn_solver.py	/^    def select_action(self, state, eps):$/;"	m	class:DqnSolver
set_environment_variables	fisherman_dilemma/fisherman_random.py	/^    def set_environment_variables(self, max_stock, initial_stock, population, n_agents, growth_rate, max_steps):$/;"	m	class:RandomFishermanEnv
show	dqn/live_graph.py	/^    def show(self):$/;"	m	class:LiveGraph
step	fisherman_dilemma/fisherman_random.py	/^    def step(self, actions):$/;"	m	class:RandomFishermanEnv
store	dqn/dqn_solver.py	/^    def store(self, state, action, reward, next_state, done):$/;"	m	class:DqnSolver
v_alpha	dqn/cartpole_runner.py	/^    v_alpha=np.linspace(0.001, 0.01, num=5), v_alpha_decay=np.linspace(0.001, 0.01, num=5), verbose = True)$/;"	v
v_eps_decay	dqn/cartpole_runner.py	/^    v_eps_decay=np.linspace(0.99, 1.0, endpoint=False, num=5), v_eps_min=np.linspace(0.05, 0.1, num=5), $/;"	v
